
# Parser_CalcParser_parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'calc_grammarleftPLUSMINUSleftMULTIDIVIDErightUMINUSDIVIDE EQUALS LPAREN MINUS MULTI NUMBER PLUS RPAREN SEMI STRINGcalc_grammar : expr SEMIexpr : operation_expressionoperation_expression : expr PLUS expr\n                                | expr MINUS expr\n                                | expr MULTI expr\n                                | expr DIVIDE expr\n                                | expr EQUALS expr\n                                expr : LPAREN expr RPARENexpr : termterm : MINUS term %prec UMINUSterm : STRING\n                | NUMBER'
    
_lr_action_items = {'LPAREN':([0,4,10,11,12,13,14,],[4,4,4,4,4,4,4,]),'MINUS':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,],[6,11,-2,6,-9,6,-11,-12,6,6,6,6,6,11,-10,-3,-4,-5,-6,11,-8,]),'STRING':([0,4,6,10,11,12,13,14,],[7,7,7,7,7,7,7,7,]),'NUMBER':([0,4,6,10,11,12,13,14,],[8,8,8,8,8,8,8,8,]),'$end':([1,9,],[0,-1,]),'SEMI':([2,3,5,7,8,16,17,18,19,20,21,22,],[9,-2,-9,-11,-12,-10,-3,-4,-5,-6,-7,-8,]),'PLUS':([2,3,5,7,8,15,16,17,18,19,20,21,22,],[10,-2,-9,-11,-12,10,-10,-3,-4,-5,-6,10,-8,]),'MULTI':([2,3,5,7,8,15,16,17,18,19,20,21,22,],[12,-2,-9,-11,-12,12,-10,12,12,-5,-6,12,-8,]),'DIVIDE':([2,3,5,7,8,15,16,17,18,19,20,21,22,],[13,-2,-9,-11,-12,13,-10,13,13,-5,-6,13,-8,]),'EQUALS':([2,3,5,7,8,15,16,17,18,19,20,21,22,],[14,-2,-9,-11,-12,14,-10,-3,-4,-5,-6,14,-8,]),'RPAREN':([3,5,7,8,15,16,17,18,19,20,21,22,],[-2,-9,-11,-12,22,-10,-3,-4,-5,-6,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc_grammar':([0,],[1,]),'expr':([0,4,10,11,12,13,14,],[2,15,17,18,19,20,21,]),'operation_expression':([0,4,10,11,12,13,14,],[3,3,3,3,3,3,3,]),'term':([0,4,6,10,11,12,13,14,],[5,5,16,5,5,5,5,5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc_grammar","S'",1,None,None,None),
  ('calc_grammar -> expr SEMI','calc_grammar',2,'p_calc_grammar','Parser.py',110),
  ('expr -> operation_expression','expr',1,'p_expr','Parser.py',119),
  ('operation_expression -> expr PLUS expr','operation_expression',3,'p_operation_expression','Parser.py',127),
  ('operation_expression -> expr MINUS expr','operation_expression',3,'p_operation_expression','Parser.py',128),
  ('operation_expression -> expr MULTI expr','operation_expression',3,'p_operation_expression','Parser.py',129),
  ('operation_expression -> expr DIVIDE expr','operation_expression',3,'p_operation_expression','Parser.py',130),
  ('operation_expression -> expr EQUALS expr','operation_expression',3,'p_operation_expression','Parser.py',131),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_group','Parser.py',141),
  ('expr -> term','expr',1,'p_value','Parser.py',151),
  ('term -> MINUS term','term',2,'p_uminus','Parser.py',159),
  ('term -> STRING','term',1,'p_term','Parser.py',167),
  ('term -> NUMBER','term',1,'p_term','Parser.py',168),
]
